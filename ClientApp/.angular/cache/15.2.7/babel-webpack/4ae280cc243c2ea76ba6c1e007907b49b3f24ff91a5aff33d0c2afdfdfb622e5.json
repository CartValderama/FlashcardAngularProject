{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/deck.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = function (a2) {\n  return [\"/deckform\", \"edit\", a2];\n};\nfunction DeckComponent_tr_33_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\")(12, \"a\", 10);\n    i0.ɵɵtext(13, \"Update\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"a\", 11);\n    i0.ɵɵlistener(\"click\", function DeckComponent_tr_33_Template_a_click_14_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const deck_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.deleteDeck(deck_r1));\n    });\n    i0.ɵɵtext(15, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const deck_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(deck_r1.DeckId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(deck_r1.DeckName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(deck_r1.DeckDescription);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(deck_r1.CreationDate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(deck_r1 == null ? null : deck_r1.FolderId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(6, _c0, deck_r1.DeckId));\n  }\n}\nconst _c1 = function () {\n  return [\"/deckform\", \"create\", 1];\n};\nexport class DeckComponent {\n  // injecting the HttpClient service into the component\n  constructor(_router, _deckService) {\n    this._router = _router;\n    this._deckService = _deckService;\n    this.viewTitle = \"Table\";\n    this._listFilter = \"\";\n    this.decks = [];\n    this.filteredDecks = this.decks;\n  }\n  get listFilter() {\n    return this._listFilter;\n  }\n  set listFilter(value) {\n    this._listFilter = value;\n    console.log(\"In setter: \", value);\n    this.filteredDecks = this.performFilter(value);\n  }\n  deleteDeck(deck) {\n    const confirmDelete = confirm(`Are you sure you want to delete deck #${deck.DeckId}?`);\n    if (confirmDelete) {\n      this._deckService.deleteItem(deck.DeckId).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this.filteredDecks = this.filteredDecks.filter(f => f !== deck);\n        }\n      }, error => {\n        console.log(\"Error deleting item:\", error);\n      });\n    }\n  }\n  getDecks() {\n    // call to the server with the url \"api/item/\", expected return type is an IDeck array. This is also an observable return by the get\n    this._deckService.getDecks().subscribe(data => {\n      console.log(\"All\", JSON.stringify(data));\n      this.decks = data;\n      this.filteredDecks = this.decks;\n    });\n  }\n  performFilter(filterBy) {\n    filterBy = filterBy.toLocaleLowerCase();\n    return this.decks.filter(deck => deck.DeckName.toLocaleLowerCase().includes(filterBy));\n  }\n  navigateToDeckform() {\n    this._router.navigate([\"/deckform\"]);\n  }\n  ngOnInit() {\n    console.log(\"DeckComponent created\");\n    this.getDecks();\n    console.log(\"getDecks() called from oninit!\");\n  }\n}\nDeckComponent.ɵfac = function DeckComponent_Factory(t) {\n  return new (t || DeckComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.DeckService));\n};\nDeckComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DeckComponent,\n  selectors: [[\"app-deck-component\"]],\n  decls: 34,\n  vars: 6,\n  consts: [[\"id\", \"tableLabel\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"row\"], [1, \"col-md-2\"], [1, \"col-md-4\"], [\"type\", \"text\", 3, \"ngModel\", \"ngModelChange\"], [1, \"col-md-6\"], [1, \"btn\", \"btn-secondary\", 3, \"routerLink\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-striped\"], [4, \"ngFor\", \"ngForOf\"], [3, \"routerLink\"], [1, \"delete-link\", 3, \"click\"]],\n  template: function DeckComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function DeckComponent_Template_button_click_2_listener() {\n        return ctx.getDecks();\n      });\n      i0.ɵɵtext(3, \"Get decks\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3);\n      i0.ɵɵtext(6, \"Filter by:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 4)(8, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function DeckComponent_Template_input_ngModelChange_8_listener($event) {\n        return ctx.listFilter = $event;\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(9, \"div\", 2)(10, \"div\", 6)(11, \"h4\");\n      i0.ɵɵtext(12);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(13, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function DeckComponent_Template_button_click_13_listener() {\n        return ctx.navigateToDeckform();\n      });\n      i0.ɵɵtext(14, \"Create new deck\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 7);\n      i0.ɵɵtext(16, \"Create new deck (routerlink)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"table\", 8)(18, \"thead\")(19, \"tr\")(20, \"th\");\n      i0.ɵɵtext(21, \"Deck id\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"th\");\n      i0.ɵɵtext(23, \"Deck name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"th\");\n      i0.ɵɵtext(25, \"Deck description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"th\");\n      i0.ɵɵtext(27, \"Deck creation date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"th\");\n      i0.ɵɵtext(29, \"Deck's folder id\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(30, \"th\");\n      i0.ɵɵtext(31, \"Actions\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(32, \"tbody\");\n      i0.ɵɵtemplate(33, DeckComponent_tr_33_Template, 16, 8, \"tr\", 9);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"List of decks (\", ctx.viewTitle, \" View)\");\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.listFilter);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\"Filtered by: \", ctx.listFilter, \"\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(5, _c1));\n      i0.ɵɵadvance(18);\n      i0.ɵɵproperty(\"ngForOf\", ctx.filteredDecks);\n    }\n  },\n  dependencies: [i3.NgForOf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i1.RouterLink],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","DeckComponent","constructor","_router","_deckService","decks","listFilter","_listFilter","value","console","log","filteredDecks","performFilter","deleteDeck","deck","confirmDelete","confirm","DeckId","deleteItem","subscribe","response","success","message","filter","f","error","getDecks","data","JSON","stringify","filterBy","toLocaleLowerCase","DeckName","includes","navigateToDeckform","navigate","ngOnInit","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\FlashcardProject\\FlashcardProject\\ClientApp\\src\\app\\deck\\deck.component.html","C:\\Users\\elija\\source\\repos\\FlashcardProject\\FlashcardProject\\ClientApp\\src\\app\\deck\\deck.component.ts"],"sourcesContent":["<h1 id=\"tableLabel\">List of decks ({{viewTitle}} View)</h1>\r\n\r\n<button class=\"btn btn-primary\" (click)=\"getDecks()\">Get decks</button>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-md-2\">Filter by:</div>\r\n  <div class=\"col-md-4\">\r\n    <input type=\"text\" [(ngModel)] =\"listFilter\"/>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-md-6\">\r\n    <h4>Filtered by: {{listFilter}}</h4>\r\n  </div>\r\n</div>\r\n\r\n<button class=\"btn btn-primary\" (click)=\"navigateToDeckform()\">Create new deck</button>\r\n<button class=\"btn btn-secondary\" [routerLink]=\"['/deckform', 'create', 1]\">Create new deck (routerlink)</button>\r\n\r\n<table class=\"table table-striped\" aria-labelledby=\"tableLabel\">\r\n  <thead>\r\n    <tr>\r\n      <th>Deck id</th>\r\n      <th>Deck name</th>\r\n      <th>Deck description</th>\r\n      <th>Deck creation date</th>\r\n      <th>Deck's folder id</th>\r\n      <th>Actions</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let deck of filteredDecks\">\r\n      <td>{{deck.DeckId}}</td>\r\n      <td>{{deck.DeckName}}</td>\r\n      <td>{{deck.DeckDescription}}</td>\r\n      <td>{{deck.CreationDate}}</td>\r\n      <td>{{deck?.FolderId}}</td>\r\n      <td>\r\n        <a [routerLink]=\"['/deckform', 'edit', deck.DeckId]\">Update</a>\r\n        <a class=\"delete-link\" (click)=\"deleteDeck(deck)\">Delete</a>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { IDeck } from \"../models/deck\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Router } from \"@angular/router\";\r\nimport { DeckService } from \"../services/deck.service\";\r\n\r\n@Component({\r\n  selector: \"app-deck-component\",\r\n  templateUrl: \"./deck.component.html\"\r\n})\r\n\r\nexport class DeckComponent implements OnInit{\r\n  viewTitle: string = \"Table\";\r\n  private _listFilter: string = \"\";\r\n  decks: IDeck[] = [];\r\n\r\n  // injecting the HttpClient service into the component\r\n  constructor(\r\n    private _router: Router,\r\n  private _deckService: DeckService) {}\r\n\r\n  get listFilter() {\r\n    return this._listFilter;\r\n  }\r\n  set listFilter(value: string) {\r\n    this._listFilter = value;\r\n    console.log(\"In setter: \", value);\r\n    this.filteredDecks = this.performFilter(value);\r\n  }\r\n\r\n  deleteDeck(deck: IDeck): void {\r\n    const confirmDelete = confirm(`Are you sure you want to delete deck #${deck.DeckId}?`);\r\n\r\n    if (confirmDelete) {\r\n      this._deckService.deleteItem(deck.DeckId)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this.filteredDecks = this.filteredDecks.filter(f => f !== deck);\r\n          }\r\n        },\r\n          (error) => {\r\n            console.log(\"Error deleting item:\", error);\r\n          });\r\n    }\r\n  }\r\n\r\n  getDecks(): void {\r\n    // call to the server with the url \"api/item/\", expected return type is an IDeck array. This is also an observable return by the get\r\n    this._deckService.getDecks()\r\n      .subscribe(data => { // subscribe() used to receive the data when the response is received \r\n        console.log(\"All\", JSON.stringify(data));\r\n        this.decks = data;\r\n        this.filteredDecks = this.decks;\r\n      });\r\n  }\r\n\r\n  filteredDecks: IDeck[] = this.decks;\r\n  performFilter(filterBy: string): IDeck[] {\r\n    filterBy = filterBy.toLocaleLowerCase();\r\n    return this.decks.filter((deck: IDeck) =>\r\n      deck.DeckName.toLocaleLowerCase().includes(filterBy));\r\n  }\r\n\r\n  navigateToDeckform() {\r\n    this._router.navigate([\"/deckform\"]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log(\"DeckComponent created\");\r\n    this.getDecks();\r\n    console.log(\"getDecks() called from oninit!\")\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}