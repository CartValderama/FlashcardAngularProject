{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nlet FolderComponent = class FolderComponent {\n  // injecting the HttpClient service into the component\n  constructor(_router, _folderService) {\n    this._router = _router;\n    this._folderService = _folderService;\n    this.viewTitle = \"Table\";\n    this._listFilter = \"\";\n    this.folders = [];\n    this.filteredFolders = this.folders;\n  }\n  get listFilter() {\n    return this._listFilter;\n  }\n  set listFilter(value) {\n    this._listFilter = value;\n    console.log(\"In setter: \", value);\n    this.filteredFolders = this.performFilter(value);\n  }\n  deleteItem(folder) {\n    const confirmDelete = confirm('Are you sure you want to delete folder #\"${folder.FolderId}\"?');\n    if (confirmDelete) {\n      this._folderService.deleteItem(folder.FolderId).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this.filteredFolders = this.filteredFolders.filter(f => f !== folder);\n        }\n      }, error => {\n        console.log(\"Error deleting item:\", error);\n      });\n    }\n  }\n  getFolders() {\n    // call to the server with the url \"api/item/\", expected return type is an IFolder array. This is also an observable return by the get\n    this._folderService.getFolders().subscribe(data => {\n      console.log(\"All\", JSON.stringify(data));\n      this.folders = data;\n      this.filteredFolders = this.folders;\n    });\n  }\n  performFilter(filterBy) {\n    filterBy = filterBy.toLocaleLowerCase();\n    return this.folders.filter(folder => folder.FolderName.toLocaleLowerCase().includes(filterBy));\n  }\n  navigateToFolderform() {\n    this._router.navigate([\"/folderform\"]);\n  }\n  ngOnInit() {\n    console.log(\"FolderComponent created\");\n    this.getFolders();\n    console.log(\"getFolders() called from oninit!\");\n  }\n};\nFolderComponent = __decorate([Component({\n  selector: \"app-folder-component\",\n  templateUrl: \"./folder.component.html\"\n})], FolderComponent);\nexport { FolderComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAW1C,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAK1B;EACAC,YACUC,OAAe,EACjBC,cAA6B;IAD3B,YAAO,GAAPD,OAAO;IACT,mBAAc,GAAdC,cAAc;IAPtB,cAAS,GAAW,OAAO;IACnB,gBAAW,GAAW,EAAE;IAChC,YAAO,GAAc,EAAE;IA0CvB,oBAAe,GAAc,IAAI,CAACC,OAAO;EArCD;EAExC,IAAIC,UAAU;IACZ,OAAO,IAAI,CAACC,WAAW;EACzB;EACA,IAAID,UAAU,CAACE,KAAa;IAC1B,IAAI,CAACD,WAAW,GAAGC,KAAK;IACxBC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,KAAK,CAAC;IACjC,IAAI,CAACG,eAAe,GAAG,IAAI,CAACC,aAAa,CAACJ,KAAK,CAAC;EAClD;EAEAK,UAAU,CAACC,MAAe;IACxB,MAAMC,aAAa,GAAGC,OAAO,CAAC,+DAA+D,CAAC;IAC9F,IAAID,aAAa,EAAE;MACjB,IAAI,CAACX,cAAc,CAACS,UAAU,CAACC,MAAM,CAACG,QAAQ,CAAC,CAC5CC,SAAS,CAACC,QAAQ,IAAG;QACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpBX,OAAO,CAACC,GAAG,CAACS,QAAQ,CAACE,OAAO,CAAC;UAC7B,IAAI,CAACV,eAAe,GAAG,IAAI,CAACA,eAAe,CAACW,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKT,MAAM,CAAC;;MAEzE,CAAC,EACEU,KAAK,IAAI;QACRf,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEc,KAAK,CAAC;MAC5C,CAAC,CAAC;;EAEV;EAEAC,UAAU;IACR;IACA,IAAI,CAACrB,cAAc,CAACqB,UAAU,EAAE,CAC7BP,SAAS,CAACQ,IAAI,IAAG;MAChBjB,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEiB,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC;MACxC,IAAI,CAACrB,OAAO,GAAGqB,IAAI;MACnB,IAAI,CAACf,eAAe,GAAG,IAAI,CAACN,OAAO;IACrC,CAAC,CAAC;EACN;EAGAO,aAAa,CAACiB,QAAgB;IAC5BA,QAAQ,GAAGA,QAAQ,CAACC,iBAAiB,EAAE;IACvC,OAAO,IAAI,CAACzB,OAAO,CAACiB,MAAM,CAAER,MAAe,IACzCA,MAAM,CAACiB,UAAU,CAACD,iBAAiB,EAAE,CAACE,QAAQ,CAACH,QAAQ,CAAC,CAAC;EAC7D;EAEAI,oBAAoB;IAClB,IAAI,CAAC9B,OAAO,CAAC+B,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;EACxC;EAEAC,QAAQ;IACN1B,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,IAAI,CAACe,UAAU,EAAE;IACjBhB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EACjD;CACD;AA7DYT,eAAe,eAL3BD,SAAS,CAAC;EACToC,QAAQ,EAAE,sBAAsB;EAChCC,WAAW,EAAE;CACd,CAAC,GAEWpC,eAAe,CA6D3B;SA7DYA,eAAe","names":["Component","FolderComponent","constructor","_router","_folderService","folders","listFilter","_listFilter","value","console","log","filteredFolders","performFilter","deleteItem","folder","confirmDelete","confirm","FolderId","subscribe","response","success","message","filter","f","error","getFolders","data","JSON","stringify","filterBy","toLocaleLowerCase","FolderName","includes","navigateToFolderform","navigate","ngOnInit","selector","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\FlashcardProject\\FlashcardProject\\ClientApp\\src\\app\\folder\\folder.component.ts"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { IFolder } from \"../models/folder\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Router } from \"@angular/router\";\r\nimport { FolderService } from \"../services/folder.service\";\r\n\r\n@Component({\r\n  selector: \"app-folder-component\",\r\n  templateUrl: \"./folder.component.html\"\r\n})\r\n\r\nexport class FolderComponent implements OnInit{\r\n  viewTitle: string = \"Table\";\r\n  private _listFilter: string = \"\";\r\n  folders: IFolder[] = [];\r\n\r\n  // injecting the HttpClient service into the component\r\n  constructor(\r\n    private _router: Router,\r\n  private _folderService: FolderService) {}\r\n\r\n  get listFilter() {\r\n    return this._listFilter;\r\n  }\r\n  set listFilter(value: string) {\r\n    this._listFilter = value;\r\n    console.log(\"In setter: \", value);\r\n    this.filteredFolders = this.performFilter(value);\r\n  }\r\n\r\n  deleteItem(folder: IFolder): void {\r\n    const confirmDelete = confirm('Are you sure you want to delete folder #\"${folder.FolderId}\"?');\r\n    if (confirmDelete) {\r\n      this._folderService.deleteItem(folder.FolderId)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this.filteredFolders = this.filteredFolders.filter(f => f !== folder);\r\n          }\r\n        },\r\n          (error) => {\r\n            console.log(\"Error deleting item:\", error);\r\n          });\r\n    }\r\n  }\r\n\r\n  getFolders(): void {\r\n    // call to the server with the url \"api/item/\", expected return type is an IFolder array. This is also an observable return by the get\r\n    this._folderService.getFolders()\r\n      .subscribe(data => { // subscribe() used to receive the data when the response is received \r\n        console.log(\"All\", JSON.stringify(data));\r\n        this.folders = data;\r\n        this.filteredFolders = this.folders;\r\n      });\r\n  }\r\n\r\n  filteredFolders: IFolder[] = this.folders;\r\n  performFilter(filterBy: string): IFolder[] {\r\n    filterBy = filterBy.toLocaleLowerCase();\r\n    return this.folders.filter((folder: IFolder) =>\r\n      folder.FolderName.toLocaleLowerCase().includes(filterBy));\r\n  }\r\n\r\n  navigateToFolderform() {\r\n    this._router.navigate([\"/folderform\"]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    console.log(\"FolderComponent created\");\r\n    this.getFolders();\r\n    console.log(\"getFolders() called from oninit!\")\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}