{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FlashcardService {\n  constructor(_http) {\n    this._http = _http;\n    this.baseUrl = \"api/flashcard/\";\n  }\n  getFlashcards() {\n    return this._http.get(this.baseUrl);\n  }\n  getFlashcardsByDeckId(deckId) {\n    const url = `${this.baseUrl}/bydeck${deckId}`;\n    return this._http.get(url);\n  }\n  getFlashcardById(flashcardId) {\n    const url = `${this.baseUrl}/${flashcardId}`;\n    return this._http.get(url);\n  }\n  createFlashcard(newFlashcard) {\n    newFlashcard.DeckId = 1; // all flashcards are stored in deck#1 until routings are sorted\n    const createUrl = `${this.baseUrl}/create`;\n    return this._http.post(createUrl, newFlashcard);\n  }\n  createFlashcardInDeck(deckId, newFlashcard) {\n    const tempDeckId = 1; // all flashcards are stored in deck#1 until routings are sorted\n    deckId = tempDeckId;\n    const createUrl = `${this.baseUrl}/create/${deckId}`;\n    return this._http.post(createUrl, newFlashcard);\n  }\n  updateFlashcard(flashcardId, newFlashcard) {\n    const url = `${this.baseUrl}/update/${flashcardId}`;\n    newFlashcard.FlashcardId = flashcardId;\n    return this._http.put(url, newFlashcard);\n  }\n  deleteItem(flashcardId) {\n    const url = `${this.baseUrl}/delete/${flashcardId}`;\n    return this._http.delete(url);\n  }\n}\nFlashcardService.ɵfac = function FlashcardService_Factory(t) {\n  return new (t || FlashcardService)(i0.ɵɵinject(i1.HttpClient));\n};\nFlashcardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlashcardService,\n  factory: FlashcardService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,gBAAgB;EAG3BC,YAAoBC,KAAiB;IAAjB,UAAK,GAALA,KAAK;IAFjB,YAAO,GAAG,gBAAgB;EAEO;EAEzCC,aAAa;IACX,OAAO,IAAI,CAACD,KAAK,CAACE,GAAG,CAAe,IAAI,CAACC,OAAO,CAAC;EACnD;EAEAC,qBAAqB,CAACC,MAAc;IAClC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,UAAUE,MAAM,EAAE;IAC7C,OAAO,IAAI,CAACL,KAAK,CAACE,GAAG,CAAeI,GAAG,CAAC;EAC1C;EAEAC,gBAAgB,CAACC,WAAmB;IAClC,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,IAAIK,WAAW,EAAE;IAC5C,OAAO,IAAI,CAACR,KAAK,CAACE,GAAG,CAACI,GAAG,CAAC;EAC5B;EAEAG,eAAe,CAACC,YAAwB;IACtCA,YAAY,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC;IACzB,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACT,OAAO,SAAS;IAC1C,OAAO,IAAI,CAACH,KAAK,CAACa,IAAI,CAAMD,SAAS,EAAEF,YAAY,CAAC;EACtD;EAEAI,qBAAqB,CAACT,MAAc,EAAEK,YAAwB;IAC5D,MAAMK,UAAU,GAAG,CAAC,CAAC,CAAC;IACtBV,MAAM,GAAGU,UAAU;IACnB,MAAMH,SAAS,GAAG,GAAG,IAAI,CAACT,OAAO,WAAWE,MAAM,EAAE;IACpD,OAAO,IAAI,CAACL,KAAK,CAACa,IAAI,CAAMD,SAAS,EAAEF,YAAY,CAAC;EACtD;EAEAM,eAAe,CAACR,WAAmB,EAAEE,YAAiB;IACpD,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,WAAWK,WAAW,EAAE;IACnDE,YAAY,CAACO,WAAW,GAAGT,WAAW;IACtC,OAAO,IAAI,CAACR,KAAK,CAACkB,GAAG,CAAMZ,GAAG,EAAEI,YAAY,CAAC;EAC/C;EAEAS,UAAU,CAACX,WAAmB;IAC5B,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,WAAWK,WAAW,EAAE;IACnD,OAAO,IAAI,CAACR,KAAK,CAACoB,MAAM,CAACd,GAAG,CAAC;EAC/B;;AAzCWR,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAuB,SAAhBvB,gBAAgB;EAAAwB,YAHf;AAAM","names":["FlashcardService","constructor","_http","getFlashcards","get","baseUrl","getFlashcardsByDeckId","deckId","url","getFlashcardById","flashcardId","createFlashcard","newFlashcard","DeckId","createUrl","post","createFlashcardInDeck","tempDeckId","updateFlashcard","FlashcardId","put","deleteItem","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\FlashcardProject\\FlashcardProject\\ClientApp\\src\\app\\services\\flashcard.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { IFlashcard } from \"../models/flashcard\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\n\r\nexport class FlashcardService {\r\n  private baseUrl = \"api/flashcard/\";\r\n\r\n  constructor(private _http: HttpClient) { }\r\n\r\n  getFlashcards(): Observable<IFlashcard[]> {\r\n    return this._http.get<IFlashcard[]>(this.baseUrl);\r\n  }\r\n\r\n  getFlashcardsByDeckId(deckId: number): Observable<IFlashcard[]> {\r\n    const url = `${this.baseUrl}/bydeck${deckId}`;\r\n    return this._http.get<IFlashcard[]>(url);\r\n  }\r\n\r\n  getFlashcardById(flashcardId: number): Observable<any> {\r\n    const url = `${this.baseUrl}/${flashcardId}`;\r\n    return this._http.get(url);\r\n  }\r\n\r\n  createFlashcard(newFlashcard: IFlashcard): Observable<any> {\r\n    newFlashcard.DeckId = 1; // all flashcards are stored in deck#1 until routings are sorted\r\n    const createUrl = `${this.baseUrl}/create`;\r\n    return this._http.post<any>(createUrl, newFlashcard);\r\n  }\r\n\r\n  createFlashcardInDeck(deckId: number, newFlashcard: IFlashcard): Observable<any> {\r\n    const tempDeckId = 1; // all flashcards are stored in deck#1 until routings are sorted\r\n    deckId = tempDeckId;\r\n    const createUrl = `${this.baseUrl}/create/${deckId}`;\r\n    return this._http.post<any>(createUrl, newFlashcard);\r\n  }\r\n\r\n  updateFlashcard(flashcardId: number, newFlashcard: any): Observable<any> {\r\n    const url = `${this.baseUrl}/update/${flashcardId}`;\r\n    newFlashcard.FlashcardId = flashcardId;\r\n    return this._http.put<any>(url, newFlashcard);\r\n  }\r\n\r\n  deleteItem(flashcardId: number): Observable<any> {\r\n    const url = `${this.baseUrl}/delete/${flashcardId}`;\r\n    return this._http.delete(url);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}