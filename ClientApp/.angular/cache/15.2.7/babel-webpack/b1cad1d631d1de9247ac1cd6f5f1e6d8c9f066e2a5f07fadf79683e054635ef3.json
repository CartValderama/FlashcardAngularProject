{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/folder.service\";\nexport class FolderformComponent {\n  constructor(_formbuilder, _router, _route, _folderService) {\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this._folderService = _folderService;\n    this.isEditMode = false;\n    this.folderId = -1;\n    this.folderForm = _formbuilder.group({\n      folderName: [\"\", [Validators.required, Validators.minLength(2), Validators.maxLength(15), Validators.pattern(/[0-9a-zA-ZæøåÆØÅ. \\-]{2,15}/)]],\n      folderDescription: [\"\", [Validators.maxLength(150)]]\n    });\n  }\n  onSubmit() {\n    console.log(\"FolderCreate form submitted:\");\n    console.log(this.folderForm);\n    console.log(\"The folder \" + this.folderForm.value.folderName + \" is created.\");\n    console.log(this.folderForm.touched);\n    const newFolder = this.folderForm.value;\n    const createUrl = \"api/item/create\";\n    if (this.isEditMode) {\n      this._folderService.updateFolder(this.folderId, newFolder).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate([\"/folder\"]);\n        } else {\n          console.log(\"Folder update failed\");\n        }\n      });\n    } else {\n      this._folderService.createFolder(newFolder).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate([\"/folder\"]);\n        } else {\n          console.log(\"Folder creation failed\");\n        }\n      });\n    }\n    ;\n  }\n  backToFolders() {\n    this._router.navigate([\"/folder\"]);\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      if (params[\"mode\"] === \"create\") {\n        this.isEditMode = false; // Create mode\n      } else if (params[\"mode\"] === \"edit\") {\n        this.isEditMode = true; // Edit mode\n        this.folderId = +params[\"id\"];\n        this.loadItemForEdit(this.folderId);\n      }\n    });\n  }\n  loadItemForEdit(folderId) {\n    this._folderService.getFolderById(folderId).subscribe(folder => {\n      console.log(\"retrived folder: \", folder);\n      this.folderForm.patchValue({\n        folderName: folder.FolderName,\n        folderDescription: folder.FolderDescription\n      });\n    }, error => {\n      console.error(\"Error loading folder for edit: \", error);\n    });\n  }\n}\nFolderformComponent.ɵfac = function FolderformComponent_Factory(t) {\n  return new (t || FolderformComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.FolderService));\n};\nFolderformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FolderformComponent,\n  selectors: [[\"app-folder-folderform\"]],\n  decls: 15,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"folderName\"], [\"type\", \"text\", \"id\", \"folderName\", \"formControlName\", \"folderName\", 1, \"form-control\"], [\"for\", \"folderDescription\"], [\"type\", \"text\", \"id\", \"folderDescription\", \"formControlName\", \"folderDescription\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"btn-primary\", \"btn-secondary\", 3, \"click\"]],\n  template: function FolderformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function FolderformComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Folder Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Folder Description:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 6);\n      i0.ɵɵtext(12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function FolderformComponent_Template_button_click_13_listener() {\n        return ctx.backToFolders();\n      });\n      i0.ɵɵtext(14, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \"Create folder\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.folderForm);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"disabled\", ctx.folderForm.invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.isEditMode ? \"Update\" : \"Create\", \"create Folder \");\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAA0C,gBAAgB;;;;;AASrG,OAAM,MAAOC,mBAAmB;EAK9BC,YACUC,YAAyB,EACzBC,OAAe,EACfC,MAAsB,EACtBC,cAA6B;IAH7B,iBAAY,GAAZH,YAAY;IACZ,YAAO,GAAPC,OAAO;IACP,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;IAPxB,eAAU,GAAY,KAAK;IAC3B,aAAQ,GAAW,CAAC,CAAC;IAQnB,IAAI,CAACC,UAAU,GAAGJ,YAAY,CAACK,KAAK,CAAC;MACnCC,UAAU,EAAE,CAAC,EAAE,EAAE,CACfT,UAAU,CAACU,QAAQ,EACnBV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EACvBX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,EACxBZ,UAAU,CAACa,OAAO,CAAC,6BAA6B,CAAC,CAClD,CAAC;MACFC,iBAAiB,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACY,SAAS,CAAC,GAAG,CAAC,CAAC;KACpD,CAAC;EACJ;EAEAG,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3CD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,UAAU,CAAC;IAC5BS,OAAO,CAACC,GAAG,CAAC,aAAa,GAAG,IAAI,CAACV,UAAU,CAACW,KAAK,CAACT,UAAU,GAAG,cAAc,CAAC;IAC9EO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,UAAU,CAACY,OAAO,CAAC;IACpC,MAAMC,SAAS,GAAG,IAAI,CAACb,UAAU,CAACW,KAAK;IACvC,MAAMG,SAAS,GAAG,iBAAiB;IACnC,IAAI,IAAI,CAACC,UAAU,EAAE;MACnB,IAAI,CAAChB,cAAc,CAACiB,YAAY,CAAC,IAAI,CAACC,QAAQ,EAAEJ,SAAS,CAAC,CACvDK,SAAS,CAACC,QAAQ,IAAG;QACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpBX,OAAO,CAACC,GAAG,CAACS,QAAQ,CAACE,OAAO,CAAC;UAC7B,IAAI,CAACxB,OAAO,CAACyB,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;SACnC,MACI;UACHb,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;;MAEvC,CAAC,CAAC;KACL,MACI;MACH,IAAI,CAACX,cAAc,CAACwB,YAAY,CAACV,SAAS,CAAC,CACxCK,SAAS,CAACC,QAAQ,IAAG;QACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpBX,OAAO,CAACC,GAAG,CAACS,QAAQ,CAACE,OAAO,CAAC;UAC7B,IAAI,CAACxB,OAAO,CAACyB,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;SACnC,MACI;UACHb,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;;MAEzC,CAAC,CAAC;;IACL;EACH;EAEAc,aAAa;IACX,IAAI,CAAC3B,OAAO,CAACyB,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;EACpC;EAEAG,QAAQ;IACN,IAAI,CAAC3B,MAAM,CAAC4B,MAAM,CAACR,SAAS,CAACQ,MAAM,IAAG;MACpC,IAAIA,MAAM,CAAC,MAAM,CAAC,KAAK,QAAQ,EAAE;QAC/B,IAAI,CAACX,UAAU,GAAG,KAAK,CAAC,CAAC;OAC1B,MAAM,IAAIW,MAAM,CAAC,MAAM,CAAC,KAAK,MAAM,EAAE;QACpC,IAAI,CAACX,UAAU,GAAG,IAAI,CAAC,CAAC;QACxB,IAAI,CAACE,QAAQ,GAAG,CAACS,MAAM,CAAC,IAAI,CAAC;QAC7B,IAAI,CAACC,eAAe,CAAC,IAAI,CAACV,QAAQ,CAAC;;IAEvC,CAAC,CAAC;EACJ;EAEAU,eAAe,CAACV,QAAgB;IAC9B,IAAI,CAAClB,cAAc,CAAC6B,aAAa,CAACX,QAAQ,CAAC,CACxCC,SAAS,CACPW,MAAW,IAAI;MACdpB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEmB,MAAM,CAAC;MACxC,IAAI,CAAC7B,UAAU,CAAC8B,UAAU,CAAC;QACzB5B,UAAU,EAAE2B,MAAM,CAACE,UAAU;QAC7BxB,iBAAiB,EAAEsB,MAAM,CAACG;OAC3B,CAAC;IACJ,CAAC,EACAC,KAAU,IAAI;MACbxB,OAAO,CAACwB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD,CAAC,CACF;EACL;;AArFWvC,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAwC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVhCC,0BAAI;MAAAA,YAAkD;MAAAA,iBAAK;MAE3DA,+BAAuD;MAAxBA;QAAA,OAAYC,cAAU;MAAA,EAAC;MACpDD,8BAAwB;MACEA,4BAAY;MAAAA,iBAAQ;MAC5CA,2BAAqF;MACvFA,iBAAM;MACNA,8BAAwB;MACSA,mCAAmB;MAAAA,iBAAQ;MAC1DA,4BAAmG;MACrGA,iBAAM;MACNA,kCAA8E;MAC5EA,aACF;MAAAA,iBAAS;MACTA,kCAAoE;MAA1BA;QAAA,OAASC,mBAAe;MAAA,EAAC;MAACD,uBAAM;MAAAA,iBAAS;;;MAdjFA,eAAkD;MAAlDA,gFAAkD;MAEhDA,eAAwB;MAAxBA,0CAAwB;MASkBA,eAA+B;MAA/BA,iDAA+B;MAC3EA,eACF;MADEA,kFACF","names":["Validators","FolderformComponent","constructor","_formbuilder","_router","_route","_folderService","folderForm","group","folderName","required","minLength","maxLength","pattern","folderDescription","onSubmit","console","log","value","touched","newFolder","createUrl","isEditMode","updateFolder","folderId","subscribe","response","success","message","navigate","createFolder","backToFolders","ngOnInit","params","loadItemForEdit","getFolderById","folder","patchValue","FolderName","FolderDescription","error","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\FlashcardProject\\FlashcardProject\\ClientApp\\src\\app\\folder\\folderform.component.ts","C:\\Users\\elija\\source\\repos\\FlashcardProject\\FlashcardProject\\ClientApp\\src\\app\\folder\\folderform.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { FolderService } from \"../services/folder.service\";\r\n\r\n@Component({\r\n  selector: \"app-folder-folderform\",\r\n  templateUrl: \"./folderform.component.html\"\r\n})\r\n\r\nexport class FolderformComponent {\r\n  folderForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  folderId: number = -1;\r\n\r\n  constructor(\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _route: ActivatedRoute,\r\n    private _folderService: FolderService)\r\n  {\r\n    this.folderForm = _formbuilder.group({\r\n      folderName: [\"\", [\r\n        Validators.required,\r\n        Validators.minLength(2),\r\n        Validators.maxLength(15),\r\n        Validators.pattern(/[0-9a-zA-ZæøåÆØÅ. \\-]{2,15}/)\r\n      ]],\r\n      folderDescription: [\"\", [Validators.maxLength(150)]],\r\n    })\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(\"FolderCreate form submitted:\");\r\n    console.log(this.folderForm);\r\n    console.log(\"The folder \" + this.folderForm.value.folderName + \" is created.\");\r\n    console.log(this.folderForm.touched);\r\n    const newFolder = this.folderForm.value;\r\n    const createUrl = \"api/item/create\";\r\n    if (this.isEditMode) {\r\n      this._folderService.updateFolder(this.folderId, newFolder)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this._router.navigate([\"/folder\"]);\r\n          }\r\n          else {\r\n            console.log(\"Folder update failed\");\r\n          }\r\n        })\r\n    }\r\n    else {\r\n      this._folderService.createFolder(newFolder)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this._router.navigate([\"/folder\"]);\r\n          }\r\n          else {\r\n            console.log(\"Folder creation failed\");\r\n          }\r\n        })\r\n    };\r\n  }\r\n\r\n  backToFolders() {\r\n    this._router.navigate([\"/folder\"]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      if (params[\"mode\"] === \"create\") {\r\n        this.isEditMode = false; // Create mode\r\n      } else if (params[\"mode\"] === \"edit\") {\r\n        this.isEditMode = true; // Edit mode\r\n        this.folderId = +params[\"id\"];\r\n        this.loadItemForEdit(this.folderId);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadItemForEdit(folderId: number) {\r\n    this._folderService.getFolderById(folderId)\r\n      .subscribe(\r\n        (folder: any) => {\r\n          console.log(\"retrived folder: \", folder);\r\n          this.folderForm.patchValue({\r\n            folderName: folder.FolderName,\r\n            folderDescription: folder.FolderDescription\r\n          });\r\n        },\r\n        (error: any) => {\r\n          console.error(\"Error loading folder for edit: \", error);\r\n        }\r\n      );\r\n  }\r\n}\r\n","<h2>{{isEditMode ? 'Update' : 'Create' }}Create folder</h2>\r\n\r\n<form [formGroup]=\"folderForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"folderName\">Folder Name:</label>\r\n    <input type=\"text\" id=\"folderName\" formControlName=\"folderName\" class=\"form-control\">\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"folderDescription\">Folder Description:</label>\r\n    <input type=\"text\" id=\"folderDescription\" formControlName=\"folderDescription\" class=\"form-control\">\r\n  </div>\r\n  <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"folderForm.invalid\">\r\n    {{isEditMode ? 'Update' : 'Create'}}create Folder\r\n  </button>\r\n  <button class=\"btn-primary btn-secondary\" (click)=\"backToFolders()\">Cancel</button>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}