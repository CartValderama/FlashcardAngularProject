{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DeckService {\n  constructor(_http) {\n    this._http = _http;\n    this.baseUrl = \"api/deck/\";\n  }\n  getDecks() {\n    return this._http.get(this.baseUrl);\n  }\n  createDeck(newDeck) {\n    const createUrl = `${this.baseUrl}/create`;\n    return this._http.post(createUrl, newDeck);\n  }\n  createDeckInFolder(folderId, newDeck) {\n    const createUrl = `${this.baseUrl}/create/${folderId}`;\n    return this._http.post(createUrl, newDeck);\n  }\n  getDeckById(deckId) {\n    const url = `${this.baseUrl}/${deckId}`;\n    return this._http.get(url);\n  }\n  updateDeck(deckId, newDeck) {\n    const url = `${this.baseUrl}/update/${deckId}`;\n    newDeck.DeckId = deckId;\n    return this._http.put(url, newDeck);\n  }\n  deleteItem(deckId) {\n    const url = `${this.baseUrl}/delete/${deckId}`;\n    return this._http.delete(url);\n  }\n}\nDeckService.ɵfac = function DeckService_Factory(t) {\n  return new (t || DeckService)(i0.ɵɵinject(i1.HttpClient));\n};\nDeckService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DeckService,\n  factory: DeckService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,KAAiB;IAAjB,UAAK,GAALA,KAAK;IAFjB,YAAO,GAAG,WAAW;EAEY;EAEzCC,QAAQ;IACN,OAAO,IAAI,CAACD,KAAK,CAACE,GAAG,CAAU,IAAI,CAACC,OAAO,CAAC;EAC9C;EAEAC,UAAU,CAACC,OAAc;IACvB,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACH,OAAO,SAAS;IAC1C,OAAO,IAAI,CAACH,KAAK,CAACO,IAAI,CAAMD,SAAS,EAAED,OAAO,CAAC;EACjD;EAEAG,kBAAkB,CAACC,QAAgB,EAAEJ,OAAc;IACjD,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACH,OAAO,WAAWM,QAAQ,EAAE;IACtD,OAAO,IAAI,CAACT,KAAK,CAACO,IAAI,CAAMD,SAAS,EAAED,OAAO,CAAC;EACjD;EAEAK,WAAW,CAACC,MAAc;IACxB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,IAAIQ,MAAM,EAAE;IACvC,OAAO,IAAI,CAACX,KAAK,CAACE,GAAG,CAACU,GAAG,CAAC;EAC5B;EAEAC,UAAU,CAACF,MAAc,EAAEN,OAAY;IACrC,MAAMO,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,WAAWQ,MAAM,EAAE;IAC9CN,OAAO,CAACS,MAAM,GAAGH,MAAM;IACvB,OAAO,IAAI,CAACX,KAAK,CAACe,GAAG,CAAMH,GAAG,EAAEP,OAAO,CAAC;EAC1C;EAEAW,UAAU,CAACL,MAAc;IACvB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,WAAWQ,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACX,KAAK,CAACiB,MAAM,CAACL,GAAG,CAAC;EAC/B;;AAjCWd,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAHV;AAAM","names":["DeckService","constructor","_http","getDecks","get","baseUrl","createDeck","newDeck","createUrl","post","createDeckInFolder","folderId","getDeckById","deckId","url","updateDeck","DeckId","put","deleteItem","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\FlashcardProject\\FlashcardProject\\ClientApp\\src\\app\\services\\deck.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { IDeck } from \"../models/deck\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\n\r\nexport class DeckService {\r\n  private baseUrl = \"api/deck/\";\r\n\r\n  constructor(private _http: HttpClient) { }\r\n\r\n  getDecks(): Observable<IDeck[]> {\r\n    return this._http.get<IDeck[]>(this.baseUrl);\r\n  }\r\n\r\n  createDeck(newDeck: IDeck): Observable<any> {\r\n    const createUrl = `${this.baseUrl}/create`;\r\n    return this._http.post<any>(createUrl, newDeck);\r\n  }\r\n\r\n  createDeckInFolder(folderId: number, newDeck: IDeck): Observable<any> {\r\n    const createUrl = `${this.baseUrl}/create/${folderId}`;\r\n    return this._http.post<any>(createUrl, newDeck);\r\n  }\r\n\r\n  getDeckById(deckId: number): Observable<any> {\r\n    const url = `${this.baseUrl}/${deckId}`;\r\n    return this._http.get(url);\r\n  }\r\n\r\n  updateDeck(deckId: number, newDeck: any): Observable<any> {\r\n    const url = `${this.baseUrl}/update/${deckId}`;\r\n    newDeck.DeckId = deckId;\r\n    return this._http.put<any>(url, newDeck);\r\n  }\r\n\r\n  deleteItem(deckId: number): Observable<any> {\r\n    const url = `${this.baseUrl}/delete/${deckId}`;\r\n    return this._http.delete(url);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}