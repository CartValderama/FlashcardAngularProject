{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/folder.service\";\nexport class FolderformComponent {\n  constructor(_formbuilder, _router, _folderService) {\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._folderService = _folderService;\n    this.isEditMode = false;\n    this.folderId = -1;\n    this.folderForm = _formbuilder.group({\n      folderName: [\"\", [Validators.required, Validators.minLength(2), Validators.maxLength(15), Validators.pattern(/[0-9a-zA-ZæøåÆØÅ. \\-]{2,15}/)]],\n      folderDescription: [\"\", [Validators.maxLength(150)]]\n    });\n  }\n  onSubmit() {\n    console.log(\"FolderCreate form submitted:\");\n    console.log(this.folderForm);\n    console.log(\"The folder \" + this.folderForm.value.folderName + \" is created.\");\n    console.log(this.folderForm.touched);\n    const newFolder = this.folderForm.value;\n    const createUrl = \"api/item/create\";\n    this._folderService.createFolder(newFolder).subscribe(response => {\n      if (response.success) {\n        console.log(response.message);\n        this._router.navigate([\"/folder\"]);\n      } else {\n        console.log(\"Folder creation failed\");\n      }\n    });\n    /*\r\n    if (this.isEditMode) {\r\n      this._folderService.updateFolder(this.folderId, newFolder)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this._router.navigate([\"/folders\"]);\r\n          }\r\n          else {\r\n            console.log(\"Folder update failed\");\r\n          }\r\n        });\r\n    }\r\n    else {\r\n      this._folderService.createFolder(newFolder)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this._router.navigate([\"/folders\"]);\r\n          }\r\n        });\r\n        */\n  }\n\n  backToFolders() {\n    this._router.navigate([\"/folder\"]);\n  }\n}\nFolderformComponent.ɵfac = function FolderformComponent_Factory(t) {\n  return new (t || FolderformComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FolderService));\n};\nFolderformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FolderformComponent,\n  selectors: [[\"app-folder-folderform\"]],\n  decls: 15,\n  vars: 2,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"folderName\"], [\"type\", \"text\", \"id\", \"folderName\", \"formControlName\", \"folderName\", 1, \"form-control\"], [\"for\", \"folderDescription\"], [\"type\", \"text\", \"id\", \"folderDescription\", \"formControlName\", \"folderDescription\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"btn-primary\", \"btn-secondary\", 3, \"click\"]],\n  template: function FolderformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Create folder\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function FolderformComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Folder Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Folder Description:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 6);\n      i0.ɵɵtext(12, \"create Folder\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function FolderformComponent_Template_button_click_13_listener() {\n        return ctx.backToFolders();\n      });\n      i0.ɵɵtext(14, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.folderForm);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"disabled\", ctx.folderForm.invalid);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAA0C,gBAAgB;;;;;AASrG,OAAM,MAAOC,mBAAmB;EAK9BC,YACUC,YAAyB,EACzBC,OAAe,EACfC,cAA6B;IAF7B,iBAAY,GAAZF,YAAY;IACZ,YAAO,GAAPC,OAAO;IACP,mBAAc,GAAdC,cAAc;IANxB,eAAU,GAAY,KAAK;IAC3B,aAAQ,GAAG,CAAC,CAAC;IAOX,IAAI,CAACC,UAAU,GAAGH,YAAY,CAACI,KAAK,CAAC;MACnCC,UAAU,EAAE,CAAC,EAAE,EAAE,CACfR,UAAU,CAACS,QAAQ,EACnBT,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,EACvBV,UAAU,CAACW,SAAS,CAAC,EAAE,CAAC,EACxBX,UAAU,CAACY,OAAO,CAAC,6BAA6B,CAAC,CAClD,CAAC;MACFC,iBAAiB,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACW,SAAS,CAAC,GAAG,CAAC,CAAC;KACpD,CAAC;EACJ;EAEAG,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3CD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,UAAU,CAAC;IAC5BS,OAAO,CAACC,GAAG,CAAC,aAAa,GAAG,IAAI,CAACV,UAAU,CAACW,KAAK,CAACT,UAAU,GAAG,cAAc,CAAC;IAC9EO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACV,UAAU,CAACY,OAAO,CAAC;IACpC,MAAMC,SAAS,GAAG,IAAI,CAACb,UAAU,CAACW,KAAK;IACvC,MAAMG,SAAS,GAAG,iBAAiB;IACnC,IAAI,CAACf,cAAc,CAACgB,YAAY,CAACF,SAAS,CAAC,CACxCG,SAAS,CAAEC,QAAyC,IAAI;MACzD,IAAIA,QAAQ,CAACC,OAAO,EAAE;QACpBT,OAAO,CAACC,GAAG,CAACO,QAAQ,CAACE,OAAO,CAAC;QAC7B,IAAI,CAACrB,OAAO,CAACsB,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;OACnC,MAAM;QACLX,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;;IAEzC,CAAC,CAAC;IAEF;;;;;;;;;;;;;;;;;;;;;;EAsBF;;EAEAW,aAAa;IACX,IAAI,CAACvB,OAAO,CAACsB,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;EACpC;;AAhEWzB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAA2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVhCC,0BAAI;MAAAA,6BAAa;MAAAA,iBAAK;MAEtBA,+BAAuD;MAAxBA;QAAA,OAAYC,cAAU;MAAA,EAAC;MACpDD,8BAAwB;MACEA,4BAAY;MAAAA,iBAAQ;MAC5CA,2BAAqF;MACvFA,iBAAM;MACNA,8BAAwB;MACSA,mCAAmB;MAAAA,iBAAQ;MAC1DA,4BAAmG;MACrGA,iBAAM;MACNA,kCAA8E;MAAAA,8BAAa;MAAAA,iBAAS;MACpGA,kCAAoE;MAA1BA;QAAA,OAASC,mBAAe;MAAA,EAAC;MAACD,uBAAM;MAAAA,iBAAS;;;MAV/EA,eAAwB;MAAxBA,0CAAwB;MASkBA,eAA+B;MAA/BA,iDAA+B","names":["Validators","FolderformComponent","constructor","_formbuilder","_router","_folderService","folderForm","group","folderName","required","minLength","maxLength","pattern","folderDescription","onSubmit","console","log","value","touched","newFolder","createUrl","createFolder","subscribe","response","success","message","navigate","backToFolders","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\FlashcardProject\\FlashcardProject\\ClientApp\\src\\app\\folder\\folderform.component.ts","C:\\Users\\elija\\source\\repos\\FlashcardProject\\FlashcardProject\\ClientApp\\src\\app\\folder\\folderform.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { Router } from \"@angular/router\";\r\nimport { FolderService } from \"../services/folder.service\";\r\n\r\n@Component({\r\n  selector: \"app-folder-folderform\",\r\n  templateUrl: \"./folderform.component.html\"\r\n})\r\n\r\nexport class FolderformComponent {\r\n  folderForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  folderId = -1;\r\n\r\n  constructor(\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _folderService: FolderService)\r\n  {\r\n    this.folderForm = _formbuilder.group({\r\n      folderName: [\"\", [\r\n        Validators.required,\r\n        Validators.minLength(2),\r\n        Validators.maxLength(15),\r\n        Validators.pattern(/[0-9a-zA-ZæøåÆØÅ. \\-]{2,15}/)\r\n      ]],\r\n      folderDescription: [\"\", [Validators.maxLength(150)]],\r\n    })\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(\"FolderCreate form submitted:\");\r\n    console.log(this.folderForm);\r\n    console.log(\"The folder \" + this.folderForm.value.folderName + \" is created.\");\r\n    console.log(this.folderForm.touched);\r\n    const newFolder = this.folderForm.value;\r\n    const createUrl = \"api/item/create\";\r\n    this._folderService.createFolder(newFolder)\r\n      .subscribe((response: { success: any; message: any; }) => {\r\n      if (response.success) {\r\n        console.log(response.message);\r\n        this._router.navigate([\"/folder\"]);\r\n      } else {\r\n        console.log(\"Folder creation failed\");\r\n      }\r\n    });\r\n\r\n    /*\r\n    if (this.isEditMode) {\r\n      this._folderService.updateFolder(this.folderId, newFolder)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this._router.navigate([\"/folders\"]);\r\n          }\r\n          else {\r\n            console.log(\"Folder update failed\");\r\n          }\r\n        });\r\n    }\r\n    else {\r\n      this._folderService.createFolder(newFolder)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this._router.navigate([\"/folders\"]);\r\n          }\r\n        });\r\n        */\r\n  }\r\n\r\n  backToFolders() {\r\n    this._router.navigate([\"/folder\"]);\r\n  }\r\n}\r\n","<h2>Create folder</h2>\r\n\r\n<form [formGroup]=\"folderForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"folderName\">Folder Name:</label>\r\n    <input type=\"text\" id=\"folderName\" formControlName=\"folderName\" class=\"form-control\">\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"folderDescription\">Folder Description:</label>\r\n    <input type=\"text\" id=\"folderDescription\" formControlName=\"folderDescription\" class=\"form-control\">\r\n  </div>\r\n  <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"folderForm.invalid\">create Folder</button>\r\n  <button class=\"btn-primary btn-secondary\" (click)=\"backToFolders()\">Cancel</button>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}