{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/deck.service\";\nexport class DeckformComponent {\n  constructor(_formbuilder, _router, _route, _deckService) {\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this._deckService = _deckService;\n    this.isEditMode = false;\n    this.deckId = -1;\n    this.deckForm = _formbuilder.group({\n      deckName: [\"\", [Validators.required, Validators.minLength(2), Validators.maxLength(15), Validators.pattern(/[0-9a-zA-ZæøåÆØÅ. \\-]{2,15}/)]],\n      deckDescription: [\"\", [Validators.maxLength(150)]],\n      FolderId: [null]\n    });\n  }\n  onSubmit() {\n    console.log(\"DeckCreate form submitted:\");\n    console.log(this.deckForm);\n    console.log(\"The deck \" + this.deckForm.value.deckName + \" is created.\");\n    console.log(this.deckForm.touched);\n    const newDeck = this.deckForm.value;\n    const createUrl = \"api/item/create\";\n    if (this.isEditMode) {\n      this._deckService.updateDeck(this.deckId, newDeck).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate([\"/deck\"]);\n        } else {\n          console.log(\"Deck update failed\");\n        }\n      });\n    } else {\n      this._deckService.createDeck(newDeck).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate([\"/deck\"]);\n        } else {\n          console.log(\"Deck creation failed\");\n        }\n      });\n    }\n    ;\n  }\n  backToDecks() {\n    this._router.navigate([\"/deck\"]);\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      if (params[\"mode\"] === \"create\") {\n        this.isEditMode = false; // Create mode\n      } else if (params[\"mode\"] === \"edit\") {\n        this.isEditMode = true; // Edit mode\n        this.deckId = +params[\"id\"];\n        this.loadItemForEdit(this.deckId);\n      }\n    });\n  }\n  loadItemForEdit(deckId) {\n    this._deckService.getDeckById(deckId).subscribe(deck => {\n      console.log(\"retrived deck: \", deck);\n      this.deckForm.patchValue({\n        deckName: deck.DeckName,\n        deckDescription: deck.DeckDescription\n      });\n    }, error => {\n      console.error(\"Error loading deck for edit: \", error);\n    });\n  }\n}\nDeckformComponent.ɵfac = function DeckformComponent_Factory(t) {\n  return new (t || DeckformComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.DeckService));\n};\nDeckformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DeckformComponent,\n  selectors: [[\"app-deck-deckform\"]],\n  decls: 15,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"deckName\"], [\"type\", \"text\", \"id\", \"deckName\", \"formControlName\", \"deckName\", 1, \"form-control\"], [\"for\", \"deckDescription\"], [\"type\", \"text\", \"id\", \"deckDescription\", \"formControlName\", \"deckDescription\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"btn-primary\", \"btn-secondary\", 3, \"click\"]],\n  template: function DeckformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function DeckformComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Deck Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 1)(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Deck Description:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 6);\n      i0.ɵɵtext(12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function DeckformComponent_Template_button_click_13_listener() {\n        return ctx.backToDecks();\n      });\n      i0.ɵɵtext(14, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" deck\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.deckForm);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"disabled\", ctx.deckForm.invalid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.isEditMode ? \"Update\" : \"Create\", \" deck \");\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAA0C,gBAAgB;;;;;AASrG,OAAM,MAAOC,iBAAiB;EAK5BC,YACUC,YAAyB,EACzBC,OAAe,EACfC,MAAsB,EACtBC,YAAyB;IAHzB,iBAAY,GAAZH,YAAY;IACZ,YAAO,GAAPC,OAAO;IACP,WAAM,GAANC,MAAM;IACN,iBAAY,GAAZC,YAAY;IAPtB,eAAU,GAAY,KAAK;IAC3B,WAAM,GAAW,CAAC,CAAC;IAQjB,IAAI,CAACC,QAAQ,GAAGJ,YAAY,CAACK,KAAK,CAAC;MACjCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CACbT,UAAU,CAACU,QAAQ,EACnBV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EACvBX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,EACxBZ,UAAU,CAACa,OAAO,CAAC,6BAA6B,CAAC,CAClD,CAAC;MACFC,eAAe,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACY,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;MAClDG,QAAQ,EAAE,CAAC,IAAI;KAChB,CAAC;EACJ;EAEAC,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzCD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,QAAQ,CAAC;IAC1BU,OAAO,CAACC,GAAG,CAAC,WAAW,GAAG,IAAI,CAACX,QAAQ,CAACY,KAAK,CAACV,QAAQ,GAAG,cAAc,CAAC;IACxEQ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,QAAQ,CAACa,OAAO,CAAC;IAClC,MAAMC,OAAO,GAAG,IAAI,CAACd,QAAQ,CAACY,KAAK;IACnC,MAAMG,SAAS,GAAG,iBAAiB;IACnC,IAAI,IAAI,CAACC,UAAU,EAAE;MACnB,IAAI,CAACjB,YAAY,CAACkB,UAAU,CAAC,IAAI,CAACC,MAAM,EAAEJ,OAAO,CAAC,CAC/CK,SAAS,CAACC,QAAQ,IAAG;QACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpBX,OAAO,CAACC,GAAG,CAACS,QAAQ,CAACE,OAAO,CAAC;UAC7B,IAAI,CAACzB,OAAO,CAAC0B,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;SACjC,MACI;UACHb,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;;MAErC,CAAC,CAAC;KACL,MACI;MACH,IAAI,CAACZ,YAAY,CAACyB,UAAU,CAACV,OAAO,CAAC,CAClCK,SAAS,CAACC,QAAQ,IAAG;QACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpBX,OAAO,CAACC,GAAG,CAACS,QAAQ,CAACE,OAAO,CAAC;UAC7B,IAAI,CAACzB,OAAO,CAAC0B,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;SACjC,MACI;UACHb,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;;MAEvC,CAAC,CAAC;;IACL;EACH;EAEAc,WAAW;IACT,IAAI,CAAC5B,OAAO,CAAC0B,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;EAClC;EAEAG,QAAQ;IACN,IAAI,CAAC5B,MAAM,CAAC6B,MAAM,CAACR,SAAS,CAACQ,MAAM,IAAG;MACpC,IAAIA,MAAM,CAAC,MAAM,CAAC,KAAK,QAAQ,EAAE;QAC/B,IAAI,CAACX,UAAU,GAAG,KAAK,CAAC,CAAC;OAC1B,MAAM,IAAIW,MAAM,CAAC,MAAM,CAAC,KAAK,MAAM,EAAE;QACpC,IAAI,CAACX,UAAU,GAAG,IAAI,CAAC,CAAC;QACxB,IAAI,CAACE,MAAM,GAAG,CAACS,MAAM,CAAC,IAAI,CAAC;QAC3B,IAAI,CAACC,eAAe,CAAC,IAAI,CAACV,MAAM,CAAC;;IAErC,CAAC,CAAC;EACJ;EAEAU,eAAe,CAACV,MAAc;IAC5B,IAAI,CAACnB,YAAY,CAAC8B,WAAW,CAACX,MAAM,CAAC,CAClCC,SAAS,CACPW,IAAS,IAAI;MACZpB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEmB,IAAI,CAAC;MACpC,IAAI,CAAC9B,QAAQ,CAAC+B,UAAU,CAAC;QACvB7B,QAAQ,EAAE4B,IAAI,CAACE,QAAQ;QACvBzB,eAAe,EAAEuB,IAAI,CAACG;OACvB,CAAC;IACJ,CAAC,EACAC,KAAU,IAAI;MACbxB,OAAO,CAACwB,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD,CAAC,CACF;EACL;;AAtFWxC,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAyC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV9BC,0BAAI;MAAAA,YAA0C;MAAAA,iBAAK;MAEnDA,+BAAqD;MAAxBA;QAAA,OAAYC,cAAU;MAAA,EAAC;MAClDD,8BAAwB;MACAA,0BAAU;MAAAA,iBAAQ;MACxCA,2BAAiF;MACnFA,iBAAM;MACNA,8BAAwB;MACOA,iCAAiB;MAAAA,iBAAQ;MACtDA,4BAA+F;MACjGA,iBAAM;MACNA,kCAA4E;MAC1EA,aACF;MAAAA,iBAAS;MACTA,kCAAkE;MAAxBA;QAAA,OAASC,iBAAa;MAAA,EAAC;MAACD,uBAAM;MAAAA,iBAAS;;;MAd/EA,eAA0C;MAA1CA,wEAA0C;MAExCA,eAAsB;MAAtBA,wCAAsB;MASoBA,eAA6B;MAA7BA,+CAA6B;MACzEA,eACF;MADEA,0EACF","names":["Validators","DeckformComponent","constructor","_formbuilder","_router","_route","_deckService","deckForm","group","deckName","required","minLength","maxLength","pattern","deckDescription","FolderId","onSubmit","console","log","value","touched","newDeck","createUrl","isEditMode","updateDeck","deckId","subscribe","response","success","message","navigate","createDeck","backToDecks","ngOnInit","params","loadItemForEdit","getDeckById","deck","patchValue","DeckName","DeckDescription","error","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\FlashcardProject\\FlashcardProject\\ClientApp\\src\\app\\deck\\deckform.component.ts","C:\\Users\\elija\\source\\repos\\FlashcardProject\\FlashcardProject\\ClientApp\\src\\app\\deck\\deckform.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { DeckService } from \"../services/deck.service\";\r\n\r\n@Component({\r\n  selector: \"app-deck-deckform\",\r\n  templateUrl: \"./deckform.component.html\"\r\n})\r\n\r\nexport class DeckformComponent {\r\n  deckForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  deckId: number = -1;\r\n\r\n  constructor(\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _route: ActivatedRoute,\r\n    private _deckService: DeckService)\r\n  {\r\n    this.deckForm = _formbuilder.group({\r\n      deckName: [\"\", [\r\n        Validators.required,\r\n        Validators.minLength(2),\r\n        Validators.maxLength(15),\r\n        Validators.pattern(/[0-9a-zA-ZæøåÆØÅ. \\-]{2,15}/)\r\n      ]],\r\n      deckDescription: [\"\", [Validators.maxLength(150)]],\r\n      FolderId: [null]\r\n    })\r\n  }\r\n\r\n  onSubmit() {\r\n    console.log(\"DeckCreate form submitted:\");\r\n    console.log(this.deckForm);\r\n    console.log(\"The deck \" + this.deckForm.value.deckName + \" is created.\");\r\n    console.log(this.deckForm.touched);\r\n    const newDeck = this.deckForm.value;\r\n    const createUrl = \"api/item/create\";\r\n    if (this.isEditMode) {\r\n      this._deckService.updateDeck(this.deckId, newDeck)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this._router.navigate([\"/deck\"]);\r\n          }\r\n          else {\r\n            console.log(\"Deck update failed\");\r\n          }\r\n        })\r\n    }\r\n    else {\r\n      this._deckService.createDeck(newDeck)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this._router.navigate([\"/deck\"]);\r\n          }\r\n          else {\r\n            console.log(\"Deck creation failed\");\r\n          }\r\n        });\r\n    };\r\n  }\r\n\r\n  backToDecks() {\r\n    this._router.navigate([\"/deck\"]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      if (params[\"mode\"] === \"create\") {\r\n        this.isEditMode = false; // Create mode\r\n      } else if (params[\"mode\"] === \"edit\") {\r\n        this.isEditMode = true; // Edit mode\r\n        this.deckId = +params[\"id\"];\r\n        this.loadItemForEdit(this.deckId);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadItemForEdit(deckId: number) {\r\n    this._deckService.getDeckById(deckId)\r\n      .subscribe(\r\n        (deck: any) => {\r\n          console.log(\"retrived deck: \", deck);\r\n          this.deckForm.patchValue({\r\n            deckName: deck.DeckName,\r\n            deckDescription: deck.DeckDescription\r\n          });\r\n        },\r\n        (error: any) => {\r\n          console.error(\"Error loading deck for edit: \", error);\r\n        }\r\n      );\r\n  }\r\n}\r\n","<h2>{{isEditMode ? 'Update' : 'Create' }} deck</h2>\r\n\r\n<form [formGroup]=\"deckForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"deckName\">Deck Name:</label>\r\n    <input type=\"text\" id=\"deckName\" formControlName=\"deckName\" class=\"form-control\">\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"deckDescription\">Deck Description:</label>\r\n    <input type=\"text\" id=\"deckDescription\" formControlName=\"deckDescription\" class=\"form-control\">\r\n  </div>\r\n  <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"deckForm.invalid\">\r\n    {{isEditMode ? 'Update' : 'Create'}} deck\r\n  </button>\r\n  <button class=\"btn-primary btn-secondary\" (click)=\"backToDecks()\">Cancel</button>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}